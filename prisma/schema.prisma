// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider    = "postgresql"
  url         = env("DATABASE_URL")
  directUrl   = env("DIRECT_URL")
  
}

generator client {
  provider = "prisma-client-js"
  
}

// model User {
//   id        String    @id @default(uuid())
//   name      String
//   email     String    @unique
//   posts     Post[]
//   username  String    @unique
//   password  String
//   role      String
//   comments  Comment[]
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
// }

// model Comment {
//   id        String    @id @default(uuid())
//   content   String
//   user      User      @relation(fields: [userId], references: [id])
//   userId    String
//   post      Post      @relation(fields: [postId], references: [id])
//   postId    String
// }

model Category {
  id           String @id @default(uuid())
  title        String
  description  String
  profesor     String
  posts        Post[]
}

model Post {
  id             String @id @default(uuid())
  clerkId        String
  userEmail      String
  title          String
  category       Category @relation(fields: [categoryId] , references: [id])
  categoryId     String
  // user           User @relation (fields: [userId] , references: [id])
  userId         String
  // comments       Comment[] 
  author         String
  date           DateTime @default(now())
  images         String[]
  content        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt      
}

model User {
  id                String @id @default(uuid())
  username          String @unique
  password          String 
  name              String
  email             String @unique
  properties        Property[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Property {
  id                 String @id @default(uuid())
  address            String
  price              Int
  manager            User @relation(fields: [userId] , references: [id])
  userId             String
}

model Cartier {
  id                String @id @default(uuid())
  name              String
  description       String
}

model Booking {
  id                 String @id @default(uuid())
  userId             String
  proopertyId        String
}